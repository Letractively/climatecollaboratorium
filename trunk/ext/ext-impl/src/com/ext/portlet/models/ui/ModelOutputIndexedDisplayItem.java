/*
 * Copyright (c) 2010. M.I.T. All Rights Reserved
 * Licensed under the MIT license. Please see http://www.opensource.org/licenses/mit-license.php
 * or the license.txt file included in this distribution for the full text of the license.
 */

package com.ext.portlet.models.ui;

import mit.simulation.climate.client.MetaData;
import mit.simulation.climate.client.Scenario;
import mit.simulation.climate.client.Simulation;
import mit.simulation.climate.client.Variable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author: jintrone
 * @date: May 24, 2010
 */
public class ModelOutputIndexedDisplayItem extends ModelOutputDisplayItem {


    private Simulation sim;
    private Scenario scenario;
    private String name;
    private MetaData index;
    private List<MetaData> series = new ArrayList<MetaData>();
    private Map<MetaData, Variable> varmap = new HashMap<MetaData,Variable>();
    private ModelOutputChartType type = ModelOutputChartType.TIME_SERIES;


    public ModelOutputIndexedDisplayItem(Simulation s, String name) {
        super(s);
        this.name = name;
    }

    public String getName() {
      return name;
    }

    public ModelOutputChartType getChartType() {
       return type;
    }

    public void setChartType(ModelOutputChartType type) {
       this.type=type;
    }



    public void setScenario(Scenario s) throws IncompatibleScenarioException {
        super.setScenario(s);
        if (!s.getSimulation().equals(sim)) {
            throw new IncompatibleScenarioException("Scenario was not generated by simulation "+sim.getName());
        }
        this.scenario = s;
        for (Variable v:scenario.getOutputSet()) {
            varmap.put(v.getMetaData(),v);
        }

    }


    public MetaData getIndex() {
      return index;
    }

    void setIndex(MetaData md) {
        this.index = md;
    }



    public void addSeriesData(MetaData md) {
        series.add(md);       
    }

    public List<MetaData> getSeries() {
        return new ArrayList<MetaData>(series);
    }



    public Variable getIndexVariable() {
        return varmap.get(getIndex());
    }

    public List<Variable> getSeriesVariables() {
        List<Variable> result = new ArrayList<Variable>();
        for (MetaData md:getSeries()){
          result.add(varmap.get(md));
        }
        return result;
    }



}
