/*
 * Copyright (c) 2010. M.I.T. All Rights Reserved
 * Licensed under the MIT license. Please see http://www.opensource.org/licenses/mit-license.php
 * or the license.txt file included in this distribution for the full text of the license.
 */

package com.ext.portlet.models.ui;

import com.ext.portlet.models.NoSuchModelOutputChartOrderException;
import com.ext.portlet.models.model.ModelOutputChartOrder;
import com.ext.portlet.models.service.ModelOutputChartOrderLocalServiceUtil;
import com.liferay.counter.service.CounterLocalServiceUtil;
import com.liferay.portal.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import mit.simulation.climate.client.MetaData;
import mit.simulation.climate.client.Scenario;
import mit.simulation.climate.client.Simulation;
import mit.simulation.climate.client.Variable;

import java.util.*;

/**
 * @author: jintrone
 * @date: May 24, 2010
 */
public class ModelOutputIndexedDisplayItem extends ModelOutputDisplayItem {


    private Simulation sim;
    private Scenario scenario;
    private String name;
    private MetaData index;
    private List<ModelOutputSeriesDisplayItem> series = new ArrayList<ModelOutputSeriesDisplayItem>();
    private Map<MetaData, Variable> varmap = new HashMap<MetaData,Variable>();
    private ModelOutputChartType type = ModelOutputChartType.TIME_SERIES;

    private static Log _log = LogFactoryUtil.getLog(ModelOutputIndexedDisplayItem.class);

    private ModelOutputChartOrder chartModel;



    public ModelOutputIndexedDisplayItem(Simulation s, String name) throws SystemException {
        super(s);
        this.name = name;

        try {
            chartModel = ModelOutputChartOrderLocalServiceUtil.getChartOrder(s,name);
        } catch (NoSuchModelOutputChartOrderException e) {
            createPersistence();
        } catch (SystemException e) {
            _log.error(e);
            throw(e);
        }


    }

    private void createPersistence() throws SystemException {
        Long pk = CounterLocalServiceUtil.increment(ModelOutputChartOrder.class.getName());
        chartModel = ModelOutputChartOrderLocalServiceUtil.createModelOutputChartOrder(pk);
    }

    public String getName() {
      return name;
    }

    public ModelOutputChartType getChartType() {
       return type;
    }

    public Variable getIndexVariable() {
        return varmap.get(getIndex());
    }

     public MetaData getIndex() {
      return index;
    }

    public List<Variable> getSeriesVariables() {
        List<Variable> result = new ArrayList<Variable>();
        for (MetaData md:getSeriesMetaData()){
          result.add(varmap.get(md));
        }
        return result;
    }

    public List<MetaData> getSeriesMetaData() {
        List<MetaData> result = new ArrayList<MetaData>();
        for (ModelOutputSeriesDisplayItem item:getSeries()) {
            result.add(item.getMetaData());
        }
        return result;
    }

    public List<ModelOutputSeriesDisplayItem> getSeries() {
        Collections.sort(series);
        return series;
    }


    void setChartType(ModelOutputChartType type) {
       this.type=type;
    }



    public void setScenario(Scenario s) throws IncompatibleScenarioException {
        super.setScenario(s);
        if (!s.getSimulation().equals(sim)) {
            throw new IncompatibleScenarioException("Scenario was not generated by simulation "+sim.getName());
        }
        this.scenario = s;
        for (Variable v:scenario.getOutputSet()) {
            varmap.put(v.getMetaData(),v);
        }

    }



    void setIndex(MetaData md) {
        this.index = md;
    }

    void addSeriesData(MetaData md) throws SystemException {
        series.add(new ModelOutputSeriesDisplayItem(getSimulation(),md));
    }




     @Override
    public int order() {
        return null == chartModel ?-1: chartModel.getModelOutputChartOrder();
     }

    @Override
    public void setOrder(int o) throws SystemException {
       if (null!= chartModel) {
           chartModel.setModelOutputChartOrder(o);
           ModelOutputChartOrderLocalServiceUtil.updateModelOutputChartOrder(chartModel);
       }
    }

   

}
